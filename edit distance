//给定两个字符串s1, s2，找到使两个字符串相等所需删除字符的ASCII值的最小和。
class Solution {
public:
    int minimumDeleteSum(string s1, string s2) {
        vector<vector<int>> dp(s1.size()+1,vector<int>(s2.size()+1,0)); 
        //dp[i][j]表示s1的前i-1和s2的前j-1相等所需要删除字符的ASCII最小和
        for(int i=1;i<=s1.size();i++)               //临界条件是有一方字符串为空
            dp[i][0]=dp[i-1][0]+s1[i-1];
        for(int j=1;j<=s2.size();j++)
            dp[0][j]=dp[0][j-1]+s2[j-1];
        //dp[i][j]是s1的前i-2个字符和s2的前j-2个字符已经修改好了，这时只需要考虑第s1的第i-1个字符和s2的第j-1个字符的情况就可以了
        //如果s1的第i-1个和s2的第j-1个不一样，可以考虑“dp[i-1][j]+s1[i-1]”即s1的前i-2个和s2的前j-1个已经修改好了，用这个修改的值加上删除s1的第i-1个所需要的值
        for(int i=1;i<=s1.size();i++)
            for(int j=1;j<=s2.size();j++)
                if(s1[i-1]==s2[j-1])
                    dp[i][j]=dp[i-1][j-1];
                else
                    dp[i][j]=min(dp[i-1][j]+s1[i-1],dp[i][j-1]+s2[j-1]);
        return dp[s1.size()][s2.size()];


        

    }
};
