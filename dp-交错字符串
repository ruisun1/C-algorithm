//lc 97。给定三个字符串 s1、s2、s3，请你帮忙验证 s3 是否是由 s1 和 s2 交错 组成的。输入：s1 = "aabcc", s2 = "dbbca", s3 = "aadbbcbcac"
//结果为true，因为s3可以由s1和s2互相交叉得到

//dp[i][j]定义为s1的前i-1个和s2的前j-1个字符可不可以交叉得到s3的前i+j-2个
class Solution {
public:
    bool isInterleave(string s1, string s2, string s3) {
        if(s1.size()+s2.size()!=s3.size())
            return false;
        int dp[105][105];
        dp[0][0]=1;
        //边界情况，s1，s2其中一个为空字符串
        for(int i=1;i<=s1.size();i++)    dp[i][0]=((s1[i-1]==s3[i-1])&&dp[i-1][0]);
        for(int j=1;j<=s2.size();j++)    dp[0][j]=((s2[j-1]==s3[j-1])&&dp[0][j-1]);
        for(int i=1;i<=s1.size();i++)
            for(int j=1;j<=s2.size();j++)
            {
                if(s1[i-1]!=s3[i+j-1]&&s2[j-1]!=s3[i+j-1])         //当s1的第i-1个和s2的第j-1个都不等于s3的第i+j-2个，则dp[i][j]=0
                    dp[i][j]=0;
                else if(s1[i-1]==s2[j-1]&&s1[i-1]==s3[i+j-1])      
                //当s1的第i-1个和s2的第j-1个都等于s3的第i+j-2个，则需要s1的前i-2个+s2的前j-1个可以构成s3的前i+j-3个(s1[i-1]==s3[i+j-1])或s2的前i-2个+s1的前j-1个可以构成s3的前i+j-3个
                    dp[i][j]=dp[i-1][j]||dp[i][j-1];
                else if(s1[i-1]==s3[i+j-1])
                    dp[i][j]=dp[i-1][j];
                else if(s2[j-1]==s3[i+j-1])
                    dp[i][j]=dp[i][j-1];
            }
        return dp[s1.size()][s2.size()];
    }
};
